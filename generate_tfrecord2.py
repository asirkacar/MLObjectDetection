
import os
import glob
import pandas as pd
import io
import xml.etree.ElementTree as ET
import argparse

os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'    # Suppress TensorFlow logging (1)
import tensorflow.compat.v1 as tf
from PIL import Image
from object_detection.utils import dataset_util, label_map_util
from collections import namedtuple


csv_path= "D:/pycharmProject/pythonProject3/Tensorflow/workspace/annotations/train.csv"
csv_path2= "D:/pycharmProject/pythonProject3/Tensorflow/workspace/annotations/test.csv"

#python D:/pycharmProject/pythonProject3/Tensorflow/models/research/object_detection/model_main_tf2.py --model_dir=D:/pycharmProject/pythonProject3/Tensorflow/workspace/models/my_ssd_mobnet --pipeline_config_path=D:/pycharmProject/pythonProject3/Tensorflow/workspace/models/my_ssd_mobnet/pipeline.config --num_train_steps=5000


xml_dir= "D:/pycharmProject/pythonProject3/Tensorflow/workspace/images/train/"
xml_dir2= "D:/pycharmProject/pythonProject3/Tensorflow/workspace/images/test/"

image_dir = "D:/pycharmProject/pythonProject3/Tensorflow/workspace/images/train/"
image_dir2 = "D:/pycharmProject/pythonProject3/Tensorflow/workspace/images/test/"

labels_path="D:/pycharmProject/pythonProject3/Tensorflow/workspace/annotations/label_map.pbtxt"

output_path = "D:/pycharmProject/pythonProject3/Tensorflow/workspace/annotations/train.record"
output_path2 = "D:/pycharmProject/pythonProject3/Tensorflow/workspace/annotations/test.record"

label_map = label_map_util.load_labelmap(labels_path)
label_map_dict = label_map_util.get_label_map_dict(labels_path)


def xml_to_csv():
    """Iterates through all .xml files (generated by labelImg) in a given directory and combines
    them in a single Pandas dataframe.

    Parameters:
    ----------
    path : str
        The path containing the .xml files
    Returns
    -------
    Pandas DataFrame
        The produced dataframe
    """

    xml_list = []
    for xml_file in glob.glob(xml_dir + '/*.xml'):
        tree = ET.parse(xml_file)
        print("12545454:",xml_file)
        root = tree.getroot()
        for member in root.findall('object'):
            value = (root.find('filename').text,
                     int(root.find('size')[0].text),
                     int(root.find('size')[1].text),
                     member[0].text,
                     int(member[4][0].text),
                     int(member[4][1].text),
                     int(member[4][2].text),
                     int(member[4][3].text)
                     )
            xml_list.append(value)
    column_name = ['filename', 'width', 'height',
                   'class', 'xmin', 'ymin', 'xmax', 'ymax']
    xml_df = pd.DataFrame(xml_list, columns=column_name)
    return xml_df

def xml_to_csv_test():
    """Iterates through all .xml files (generated by labelImg) in a given directory and combines
    them in a single Pandas dataframe.

    Parameters:
    ----------
    path : str
        The path containing the .xml files
    Returns
    -------
    Pandas DataFrame
        The produced dataframe
    """

    xml_list = []
    for xml_file in glob.glob(xml_dir2 + '/*.xml'):
        tree = ET.parse(xml_file)
        print("12545454:",xml_file)
        root = tree.getroot()
        for member in root.findall('object'):
            value = (root.find('filename').text,
                     int(root.find('size')[0].text),
                     int(root.find('size')[1].text),
                     member[0].text,
                     int(member[4][0].text),
                     int(member[4][1].text),
                     int(member[4][2].text),
                     int(member[4][3].text)
                     )
            xml_list.append(value)
    column_name = ['filename', 'width', 'height',
                   'class', 'xmin', 'ymin', 'xmax', 'ymax']
    xml_df = pd.DataFrame(xml_list, columns=column_name)
    return xml_df


def class_text_to_int(row_label):
    return label_map_dict[row_label]


def split(df, group):
    data = namedtuple('data', ['filename', 'object'])
    gb = df.groupby(group)
    return [data(filename, gb.get_group(x)) for filename, x in zip(gb.groups.keys(), gb.groups)]


def create_tf_example(group, path):
    with tf.gfile.GFile(os.path.join(path, '{}'.format(group.filename)), 'rb') as fid:
        encoded_jpg = fid.read()
    encoded_jpg_io = io.BytesIO(encoded_jpg)
    image = Image.open(encoded_jpg_io)
    width, height = image.size

    filename = group.filename.encode('utf8')
    image_format = b'jpg'
    xmins = []
    xmaxs = []
    ymins = []
    ymaxs = []
    classes_text = []
    classes = []

    for index, row in group.object.iterrows():
        xmins.append(row['xmin'] / width)
        xmaxs.append(row['xmax'] / width)
        ymins.append(row['ymin'] / height)
        ymaxs.append(row['ymax'] / height)
        classes_text.append(row['class'].encode('utf8'))
        classes.append(class_text_to_int(row['class']))

    tf_example = tf.train.Example(features=tf.train.Features(feature={
        'image/height': dataset_util.int64_feature(height),
        'image/width': dataset_util.int64_feature(width),
        'image/filename': dataset_util.bytes_feature(filename),
        'image/source_id': dataset_util.bytes_feature(filename),
        'image/encoded': dataset_util.bytes_feature(encoded_jpg),
        'image/format': dataset_util.bytes_feature(image_format),
        'image/object/bbox/xmin': dataset_util.float_list_feature(xmins),
        'image/object/bbox/xmax': dataset_util.float_list_feature(xmaxs),
        'image/object/bbox/ymin': dataset_util.float_list_feature(ymins),
        'image/object/bbox/ymax': dataset_util.float_list_feature(ymaxs),
        'image/object/class/text': dataset_util.bytes_list_feature(classes_text),
        'image/object/class/label': dataset_util.int64_list_feature(classes),
    }))
    return tf_example


def main(_):

    writer = tf.python_io.TFRecordWriter(output_path)
    writer2 = tf.python_io.TFRecordWriter(output_path2)

    path = os.path.join(image_dir)
    path2 = os.path.join(image_dir2)

    examples = xml_to_csv()
    examples2 = xml_to_csv_test()

    print(examples)
    print(examples2)

    grouped = split(examples, 'filename')
    grouped2 = split(examples2, 'filename')

    for group in grouped:
        tf_example = create_tf_example(group, path)
        writer.write(tf_example.SerializeToString())
    writer.close()
    print('Successfully created the TFRecord file: {}'.format(output_path))
    if csv_path is not None:
        examples.to_csv(csv_path, index=None)
        print('Successfully created the CSV file: {}'.format(csv_path))

#-----------------------------TEST----------------------------------------------------------------
    for group in grouped2:
        tf_example = create_tf_example(group, path2)
        writer2.write(tf_example.SerializeToString())
    writer2.close()
    print('Successfully created the TFRecord file: {}'.format(output_path2))
    if csv_path2 is not None:
        examples2.to_csv(csv_path2, index=None)
        print('Successfully created the CSV file: {}'.format(csv_path2))


if __name__ == '__main__':
    tf.app.run()
